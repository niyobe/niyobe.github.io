{"version":3,"sources":["logo.svg","css sync /^/.*$","serviceWorker.js","views/Main.js","views/User.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./App.css","./_fonts.css","./_index.css","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","Boolean","window","location","hostname","match","Main","react_default","a","createElement","react_router_dom","to","React","Component","User","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","is_mounted","state","width","innerWidth","setWidth","bind","assertThisInitialized","is_resize_listener_activated","addEventListener","setState","prevProps","prevState","className","src","logo","alt","href","target","rel","react_router","exact","path","component","require","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a36dd864.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./App.css\": 158,\n\t\"./_fonts.css\": 161,\n\t\"./_index.css\": 160\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 390;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Main extends React.Component {  \r\n  render () {\r\n    return (\r\n      <div>\r\n        <p>Main Access</p>\r\n        <p><Link to='/user'>to User</Link></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass User extends React.Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <p>User Access</p>\r\n        <p><Link to='/main'>to Main</Link></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport logo from './logo.svg';\r\nimport './css/App.css';\r\n\r\nimport Main from './views/Main';\r\nimport User from './views/User';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.is_mounted = false;\r\n    this.state = {\r\n      width: window.innerWidth\r\n    }\r\n\r\n    this.setWidth = this.setWidth.bind(this);\r\n\r\n\r\n    this.is_resize_listener_activated = false;\r\n    if (this.is_resize_listener_activated === false) {\r\n      window.addEventListener('resize', this.setWidth);\r\n\r\n      this.is_resize_listener_activated = true;\r\n    }\r\n  }\r\n\r\n  setWidth () {\r\n    this.is_mounted && this.setState({\r\n      width: window.innerWidth\r\n    });\r\n  }\r\n\r\n\r\n  \r\n  componentDidUpdate (prevProps, prevState) {\r\n    \r\n  }\r\n\r\n  componentDidMount () {\r\n    this.is_mounted = true;\r\n  }\r\n\r\n\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </div>\r\n        <div>\r\n          <p><Link to=\"/user\">To User</Link></p>\r\n          <p><Link to=\"/main\">To Main</Link></p>\r\n          <Switch>\r\n            <Route exact path=\"/user\" component={User} />\r\n            <Route exact path=\"/main\" component={Main} />\r\n          </Switch>\r\n          <div>\r\n            width : {this.state.width}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.is_mounted = false;\r\n  }\r\n}\r\n\r\nexport default App;","/* Polyfills */\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\n/* React Default */\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n/* Node Modules */\nimport 'bootstrap';\n\n/* View Components */\nimport App from './App';\n\n/* Stylesheets */\nimport './css/_index.css';\nimport './css/_fonts.css';\n\nrequire.context('./css/', )\n\n\n\n\n\nrender(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  \n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}